generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Store {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  clerkId       String?    @unique
  email         String     @unique
  name          String?
  image         String?
  phone         String?
  address       String?
  favorites     Favorite[]
  orders        Order[]    @relation("UserToOrder")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Billboard {
  id                     String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId                String     @db.ObjectId
  store                  Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label                  String
  imageUrl               String
  labelColorType         String?    @default("solid") // "solid" or "gradient"
  labelSolidColor        String?    @default("#000000")
  labelGradientStart     String?
  labelGradientEnd       String?
  labelGradientDirection String?    @default("to-right") // "to-right", "to-left", "to-bottom", "to-top", "to-bottom-right", etc.
  categories             Category[]
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String    @db.ObjectId
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  name        String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String    @db.ObjectId
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  variants  Variant[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String    @db.ObjectId
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  variants  Variant[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String      @db.ObjectId
  store       Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String      @db.ObjectId
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Float
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  description String
  variants    Variant[]
  images      Image[]
  favorites   Favorite[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]

  @@index([storeId])
  @@index([categoryId])
}

model Variant {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  productId   String      @db.ObjectId
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  sizeId      String?     @db.ObjectId
  size        Size?       @relation(fields: [sizeId], references: [id])
  colorId     String?     @db.ObjectId
  color       Color?      @relation(fields: [colorId], references: [id])
  inStock     Int         @default(0)
  orderItem   OrderItem[]
  orderItemId String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([productId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Favorite {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId     String    @db.ObjectId
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  storeId    String      @db.ObjectId
  user       User?       @relation("UserToOrder", fields: [userId], references: [id], onDelete: SetNull)
  userId     String?     @db.ObjectId
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  isSent     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
  @@index([userId])
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId   String?  @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  variant   Variant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
  variantId String?  @db.ObjectId
  quantity  Int

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
} 